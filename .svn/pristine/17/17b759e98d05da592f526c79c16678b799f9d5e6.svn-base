//
//  HYRemoteViewController.m
//  HYSEM
//
//  Created by xlc on 16/11/15.
//  Copyright © 2016年 WGM. All rights reserved.
//

#import "HYRemoteViewController.h"
#import "WGMSectorButton.h"
#import "ArchieveTree.h"
@interface HYRemoteViewController ()<TWlALertviewDelegate,GCDAsyncSocketDelegate>
{
    TWLAlertView *alertView;
    NSString *_mpID;
    GCDAsyncSocket *_sendSocket;
    NSString *ipv6Addr;
    int step;//第几部
    int kind;//操作类型
    UILabel * tipLabel;/** 显示选择设备*/
    UILabel * tipLabel2;/** 显示选择设备（用于滚动）*/
    UIImageView * bgView;
    CABasicAnimation * _caanimation;/** 滚动动画*/
    CABasicAnimation * _caanimation1;/** 滚动动画*/
}
@property (strong, nonatomic) IBOutlet WGMSectorButton *offBtn;
@property (strong, nonatomic) IBOutlet WGMSectorButton *relieveBtn;
@property (strong, nonatomic) IBOutlet WGMSectorButton *warningBtn;
@property (strong, nonatomic) IBOutlet WGMSectorButton *onBtn;
@property (strong, nonatomic) IBOutlet WGMSectorButton *middleBtn;
@property (strong, nonatomic) IBOutlet UIImageView *middleImage;

@end

@implementation HYRemoteViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    // Do any additional setup after loading the view from its nib.
    self.titleLabel.text = @"遥控器";
    [self.leftButton setImage:[UIImage imageNamed:@"icon_function"] forState:UIControlStateNormal];
    [self setLeftButtonClick:@selector(leftButtonClick)];
    
    [self.rightButton setImage:[UIImage imageNamed:@"icon_function"] forState:UIControlStateNormal];
    [self setRightButtonClick:@selector(RightButtonClick)];
    
    NSString * ip = [HY_NSusefDefaults objectForKey:@"IP"];
    ipv6Addr = [self convertHostToAddress:ip];
    _middleImage.image = [UIImage imageNamed:@"image_lock1"];
    [SVProgressHUD setDefaultMaskType:SVProgressHUDMaskTypeClear];
    [self configUI];
}

#pragma mark - **************** 配置UI
- (void)configUI
{
    /** 添加信息展示label*/
    [self addTipView];
    /** 添加选择按钮*/
    [self addSelectBtn];
}

#pragma mark - **************** 添加选择View
/**
 *  @brief  在遥控页面弹出选择树页面，来选择操作的设备
 *
 *  @param  application
 *  @param  launchOptions   点击选择按钮，页面弹出选择树
 *
 *  @return
 
 */
-(void)addSelectedView{
    // ------添加遮罩层
    [self addMaskView];
    ArchieveTree * tree = [[ArchieveTree alloc] initWithFrame:CGRectMake(40*ScreenMultiple, 40*ScreenMultiple+69, SCREEN_W-80*ScreenMultiple, SCREEN_H - 60*ScreenMultiple)];
    tree.layer.masksToBounds = YES;
    tree.layer.borderWidth = 0;
    tree.layer.cornerRadius = (SCREEN_W-80*ScreenMultiple)/20;
    // ------block回调
    tree.cotrolerSelected = ^(Node * node){
        if (node.depth == 3) {//逻辑树
            tipLabel.text = [NSString stringWithFormat:@"选择电表：%@",node.name];
            kind = 0;
        }else if(node.depth == 1){
            tipLabel.text = [NSString stringWithFormat:@"选择终端：%@",node.name];
            kind = 1;
        }
        [self addAnimation];
    };
    __weak typeof(tree) weakTree = tree;
    __weak typeof(self) weakSelf = self;
    tree.clickAction = ^(NSString * n){
        if ([n isEqualToString:@"YES"]) {
            //确认
        }else if ([n isEqualToString:@"NO"]){
            //否认
        }
        [UIView animateWithDuration:1.3 animations:^{
            weakTree.alpha = 0.0;
        } completion:^(BOOL finished) {
            [weakTree removeFromSuperview];
            [bgView removeFromSuperview];
        }];
        [weakSelf.rdv_tabBarController setTabBarHidden:NO animated:YES];
    };
    [[UIApplication sharedApplication].keyWindow addSubview:tree];
//    [self.view addSubview:tree];
}

- (void)addMaskView
{
    // ------遮罩层
    bgView = [[UIImageView alloc] initWithFrame:CGRectMake(-40*ScreenMultiple, -69-40*ScreenMultiple, SCREEN_W +40*ScreenMultiple, SCREEN_H*2)];
    //    [self addSubview:bgView];
    bgView.backgroundColor = [UIColor grayColor];
    bgView.alpha = 0.4;
    bgView.userInteractionEnabled = NO;
    [self.view addSubview:bgView];
}
#pragma mark - **************** 选择终端
- (void)addSelectBtn
{
   
}
#pragma mark - **************** 显示选择设备信息
- (void)addTipView
{
    tipLabel = [FactoryUI createLabelWithFrame:CGRectMake(SCREEN_W, 0, SCREEN_W, 40*ScreenMultiple) text:@"请选择要操作的设备" textColor:[UIColor grayColor] font:[UIFont systemFontOfSize:14]];
    UIView * tipView = [FactoryUI createViewWithFrame:CGRectMake(0, 0, SCREEN_W, 40*ScreenMultiple)];
    [tipView addSubview:tipLabel];
    
    tipLabel2 = [FactoryUI createLabelWithFrame:CGRectMake(tipLabel.frame.origin.x + tipLabel.frame.size.width, tipLabel.frame.origin.y, tipLabel.frame.size.width, tipLabel.frame.size.height) text:@"请选择要操作的设备" textColor:[UIColor grayColor] font:[UIFont systemFontOfSize:14]];
    [tipView addSubview:tipLabel2];
    
    [tipView setBackgroundColor:RGBA(248, 248, 255, 0.5)];
    [self.view addSubview:tipView];
    
    // ------加入滚动动画
    [self addAnimation];
}

- (void)addAnimation
{
    _caanimation = [CABasicAnimation animationWithKeyPath:@"position.x"];
    _caanimation.duration = 6.0f;
    _caanimation.repeatCount = MAXFLOAT;
    _caanimation.removedOnCompletion = NO;
    _caanimation.timingFunction =  [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseIn];
    _caanimation.fromValue = @(tipLabel.center.x);
    _caanimation.toValue= @(-tipLabel.frame.size.width);
    [tipLabel.layer addAnimation:_caanimation forKey:@"A"];
    
//    [UIView animateWithDuration:4 delay:0 options:UIViewAnimationOptionCurveLinear animations:^{
//        tipLabel.frame = CGRectMake(-tipLabel.frame.size.width, tipLabel.frame.origin.y, tipLabel.frame.size.width, tipLabel.frame.size.height);
//        tipLabel2.frame = CGRectMake(0, tipLabel2.frame.origin.y, tipLabel2.frame.size.width, tipLabel2.frame.size.height);
//    } completion:^(BOOL finished) {
//        tipLabel.frame = firstFrame;
//        tipLabel2.frame = secondFrame;
//        [self addAnimation];
//    }];
}
-(NSString *)convertHostToAddress:(NSString *)host {
    
    NSError *err = nil;
    
    NSMutableArray *addresses = [GCDAsyncSocket lookupHost:host port:0 error:&err];
    
    //    NSLog(@"address%@",addresses);
    
    NSData *address4 = nil;
    NSData *address6 = nil;
    
    for (NSData *address in addresses)
    {
        if (!address4 && [GCDAsyncSocket isIPv4Address:address])
        {
            address4 = address;
        }
        else if (!address6 && [GCDAsyncSocket isIPv6Address:address])
        {
            address6 = address;
        }
    }
    
    NSString *ip;
    
    if (address6) {
        //        NSLog(@"ipv6%@",[GCDAsyncSocket hostFromAddress:address6]);
        ip = [GCDAsyncSocket hostFromAddress:address6];
    }else {
        //        NSLog(@"ipv4%@",[GCDAsyncSocket hostFromAddress:address4]);
        ip = [GCDAsyncSocket hostFromAddress:address4];
    }
    
    return ip;
    
}


- (void)initSocket
{
    if ([_sendSocket isConnected]) {
        [_sendSocket disconnect];
    }
    _sendSocket = [[GCDAsyncSocket alloc]initWithDelegate:self delegateQueue:dispatch_get_main_queue()];
    [_sendSocket connectToHost:ipv6Addr onPort:SocketonPort withTimeout:10 error:nil];
}

//告警
- (IBAction)warningClick:(id)sender {
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"jiesuo"] == YES) {
        if ([self judgeMpBlank] == YES) {
            if ([self judgeMpCorrect] == YES) {
                //组帧
                [self initSocket];
                if (kind == 0) {
                    [self writeDataToHost:2];
                }else if(kind == 1){
                    [self writeDataToHostT:2 WithStep:1];
                }
                
            }else{
                [UIView addMJNotifierWithText:@"请选择正确表" dismissAutomatically:NO];
            }
        }else{
            [UIView addMJNotifierWithText:@"请选择一块表" dismissAutomatically:NO];
        }
    }else{
        [UIView addMJNotifierWithText:@"请先解锁" dismissAutomatically:NO];
    }
}

//停电
- (IBAction)offPowerClick:(id)sender {
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"jiesuo"] == YES) {
        if ([self judgeMpBlank] == YES) {
            if ([self judgeMpCorrect] == YES) {
                //组帧
                [self initSocket];
                if (kind == 0) {
                    [self writeDataToHost:0];
                }else if(kind == 1){
                    [self writeDataToHostT:0 WithStep:1];
                }
            }else{
                [UIView addMJNotifierWithText:@"请选择正确表" dismissAutomatically:NO];
            }
        }else{
            [UIView addMJNotifierWithText:@"请选择一块表" dismissAutomatically:YES];
        }
        
    }else{
        [UIView addMJNotifierWithText:@"请先解锁" dismissAutomatically:NO];
    }
}

//送电
- (IBAction)onPowerClick:(id)sender {
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"jiesuo"] == YES) {
        if ([self judgeMpBlank] == YES) {
            if ([self judgeMpCorrect] == YES) {
                //组帧
                [self initSocket];
                if (kind == 0) {
                    [self writeDataToHost:1];
                }else if(kind == 1){
                    [self writeDataToHostT:1 WithStep:1];
                }
            }else{
                [UIView addMJNotifierWithText:@"请选择正确表" dismissAutomatically:NO];
            }
        }else{
            [UIView addMJNotifierWithText:@"请选择一块表" dismissAutomatically:YES];
        }
        
    }else{
        [UIView addMJNotifierWithText:@"请先解锁" dismissAutomatically:NO];
    }
}

//解除
- (IBAction)relieveClick:(id)sender {
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"jiesuo"] == YES) {
        if ([self judgeMpBlank] == YES) {
            if ([self judgeMpCorrect] == YES) {
                //组帧
                [self initSocket];
                if (kind == 0) {
                    [self writeDataToHost:3];
                }else if(kind == 1){
                    [self writeDataToHostT:3 WithStep:1];
                }
            }else{
                [UIView addMJNotifierWithText:@"请选择正确表" dismissAutomatically:NO];
            }
        }else{
            [UIView addMJNotifierWithText:@"请选择一块表" dismissAutomatically:YES];
        }
        
    }else{
        [UIView addMJNotifierWithText:@"请先解锁" dismissAutomatically:NO];
    }
}

#pragma mark --中间点击
- (IBAction)middleBtnClick:(id)sender {
    DLog(@"点击了中间");
    HYSingleManager *manager = [HYSingleManager sharedManager];
//    [self writeDataToHostT:0 WithStep:2];
    if (manager.user.user_type == 4) {
        [UIView addMJNotifierWithText:@"对不起,权限不足!" dismissAutomatically:NO];
    }else{
        if ([[NSUserDefaults standardUserDefaults] boolForKey:@"jiesuo"] == YES) {
            
        }else{
            [self loadAlertView:@"操作选项" contentStr:nil btnNum:2 btnStrArr:[NSArray arrayWithObjects:@"确定",@"取消",nil] type:17];
        }

    }
}

- (void)writeDataToHost:(int)type
{
    NSString *terminal_ID;
    NSString *mp_add;
    NSArray * arr = [HY_NSusefDefaults objectForKey:@"controlSeletced"];
    if (arr.count > 0) {
        NSNumber * m_kind = arr[0];
        NSString * m_mp = arr[1];
        if ([m_kind intValue] == kind) {
            _mpID = m_mp;
        }else{
            DLog(@"获取操作设备有问题");
            return;
        }
    }else{
        [UIView addMJNotifierWithText:@"请选择要操作的设备" dismissAutomatically:NO];
        return;
    }

    HYSingleManager *manager = [HYSingleManager sharedManager];
    for (int i = 0; i<manager.archiveUser.child_obj.count; i++) {
        CCompanyModel *company = manager.archiveUser.child_obj[i];
        for (int j = 0; j<company.child_obj1.count; j++) {
            CTerminalModel *terminal = company.child_obj1[j];
            for (int k = 0; k<terminal.child_obj.count; k++) {
                CMPModel *mp = terminal.child_obj[k];
                if ([_mpID isEqualToString:[NSString stringWithFormat:@"%llu",mp.strID]]) {
                    terminal_ID = terminal.term_ID;
                    mp_add = mp.mp_csAddr;
                }
            }
        }
    }
    HYExplainManager *explain = [HYExplainManager shareManager];
    NSData *data = [explain combinRemoteControlFrame:terminal_ID :mp_add :type :manager.user.check_ID];
    DLog(@"%@",data);
    [_sendSocket writeData:data withTimeout:10 tag:0];
}

#pragma mark - **************** 观察应答信号
- (void)recieveACK{
    step++;//进入下一步操作
    [self writeDataToHostT:1 WithStep:step];
}
#pragma mark - **************** 控制终端
/**
 *type表示操作类型
 *step表示操作步骤
 */
- (void)writeDataToHostT:(int)type WithStep:(int)m_step
{
    //    [self initSocket];
    NSString *terminal_ID;
    NSArray * arr = [HY_NSusefDefaults objectForKey:@"controlSeletced"];
    if (arr.count > 0) {
        NSNumber * m_kind = arr[0];
        NSString * m_termianlID = arr[1];
        if ([m_kind intValue] == kind) {
            terminal_ID = m_termianlID;
        }else{
            DLog(@"获取操作设备有问题");
            return;
        }
    }else{
        [UIView addMJNotifierWithText:@"请选择要操作的设备" dismissAutomatically:NO];
        return;
    }
    NSString *mp_add;
    HYSingleManager *manager = [HYSingleManager sharedManager];
    HYExplainManager * explain = [HYExplainManager shareManager];
    NSData * data;
    switch (type) {
        case 1://送电
        {/**
          *1.终端保电解除
          *2.允许合闸
          *3.终端保电投入
          *- (NSData *)combinTermianlControlFrame:(NSString *)terminalAddress :(NSString *)mpAddress step:(int)type chekID:(UInt64)Usr_checkID;
          */
            data = [explain combinTermianlControlFrame:terminal_ID  step:m_step checkID:manager.user.check_ID];
            break;
        }
        case 0://断电
        {
          /**
             *1终端保电解除F33
             *2遥控跳闸 F1
             *3终端保电投入F25
             *
             */
            data = [explain combinTermianlOffControlFrame:terminal_ID step:m_step checkID:manager.user.check_ID];
            break;
        }
        case 2://告警
        {
            /**
             *1.终端声音允许投入F57
             *2.终端告警参数设置F23
             *3.催费告警投入 F26
             *
             */
            data = [explain combinTermianlWaringControlFrame:terminal_ID step:m_step checkID:manager.user.check_ID];
            break;
        }
        case 3://解除
        {//终端解除 F34
            data = [explain combinTermianlRemoveWaringControlFrame:terminal_ID step:m_step checkID:manager.user.check_ID];
            break;
        }
        default:
            break;
    }
    DLog(@"%@",data);
    [_sendSocket writeData:data withTimeout:10 tag:0];
}


- (void)socket:(GCDAsyncSocket *)sock didConnectToHost:(NSString *)host port:(UInt16)port
{
    [sock readDataWithTimeout:10 tag:0];
}

- (void)socket:(GCDAsyncSocket *)sock didReadData:(NSData *)data withTag:(long)tag
{
    Byte *dataBytes = (Byte *)[data bytes];
    HYExplainManager *manager = [HYExplainManager shareManager];
    int nLen = (int)[data length];
    Byte dataByte[nLen];
    for (int i = 0; i<[data length]; i++) {
        dataByte[i] = dataBytes[i];
    }
    int rValue = [manager GW09_AnalysisTripControl:dataByte :nLen];
    
    if (rValue == 0) {
        [SVProgressHUD showErrorWithStatus:@"通讯异常"];
    }else if (rValue == 1){
        [SVProgressHUD showSuccessWithStatus:@"通讯成功"];
    }else if (rValue == 2){
        [SVProgressHUD showErrorWithStatus:@"通讯失败"];
    }

//    if (kind != 0) {
//        //终端操作
//        switch (kind) {
//            case 1:
//                if (step<3) {
//                    step++
//                }
//                break;
//            case 2:
//                <#statements#>
//                break;
//            case 3:
//                <#statements#>
//                break;
//            case 4:
//                
//                break;
//                
//            default:
//                break;
//        }
//    }
    
    [sock readDataWithTimeout:10 tag:0];
}

- (void)TSR376_Analysis_All_Frame:(unsigned char*)dataBytes :(unsigned int)length
{
    HYExplainManager *manager = [HYExplainManager shareManager];
    unsigned int val = [manager GW09_Checkout:dataBytes :length];
    unsigned int AFN = [manager TSR376_Get_AFN_Frame:dataBytes];
    switch (val) {
        case 0:
            //错误帧
            [SVProgressHUD showErrorWithStatus:@"错误帧"];
            break;
        case 1:
            switch (AFN) {
                case 0:
                    //全部确认
                    break;
                case 1:
                    //全部否认
                    [SVProgressHUD showErrorWithStatus:@"错误帧"];
                    break;
                case 2:
                    //数据单元标识确认和否认:对收到报文中的全部数据单元标识进行逐个确认/否认
                    break;
                case 3:
                    //验证码过期否认
                    [SVProgressHUD showErrorWithStatus:@"验证码过期,请重新登录"];
                    break;
                case 4:
                    //用户验证ID,登录帧
                    
                    break;
                case 5:
                {//接收到用户档案
                    
                    break;}
                case 6:
                    //群档案
                    
                    break;
                case 7:
                {//接收单位档案
                    
                    
                    break;}
                case 8:
                {//接收线路档案
                    
                    break;}
                case 9:
                    //站线档案
                    
                    break;
                case 10:
                {
                    //终接收端档案
                    
                    break;}
                case 11:
                {//组档案
                    
                    break;}
                case 12:
                {//设备档案
                    
                    break;}
                case 13:
                {//查询2类数据
                    int iEnd;
                    [manager TSR376_Analysis_QueryInfFame:dataBytes bufer_len:length iEnd:&iEnd];
                    break;
                }
                default:
                    break;
            }
            
        default:
            break;
    }
}


//判断所选表是否为空
- (BOOL)judgeMpBlank
{
    NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
    _mpID = [defaults objectForKey:@"mpID"];
    if ([self isBlankString:_mpID] == NO) {
        return YES;
    }
    return NO;
}

//判断字符串是否为空
- (BOOL) isBlankString:(NSString *)string {
    if (string == nil || string == NULL) {
        return YES;
    }
    if ([string isKindOfClass:[NSNull class]]) {
        return YES;
    }
    if ([[string stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]] length]==0) {
        return YES;
    }
    return NO;
}

//判断所选表是否正确
- (BOOL)judgeMpCorrect
{
    NSMutableArray *mp_IDArr = [NSMutableArray array];
    HYSingleManager *manager = [HYSingleManager sharedManager];
    for (int i = 0; i<manager.archiveUser.child_obj.count; i++) {
        CCompanyModel *company = manager.archiveUser.child_obj[i];
        for (int j = 0; j<company.child_obj1.count; j++) {
            CTerminalModel *terminal = company.child_obj1[j];
            for (int k = 0; k<terminal.child_obj.count; k++) {
                CMPModel *mp = terminal.child_obj[k];
                [mp_IDArr addObject:[NSString stringWithFormat:@"%llu",mp.strID]];
            }
        }
    }
    for (int i = 0; i<mp_IDArr.count; i++) {
        if ([_mpID isEqualToString:mp_IDArr[i]]) {
            return YES;
        }
    }
    return NO;
}

//判断密码是否正确
- (void)judgePassWord
{
    NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
    UITextField *textField = (UITextField *)[alertView viewWithTag:8888];
    UITextField *textField1 = (UITextField *)[alertView viewWithTag:8889];
    NSString *string = textField.text;
    NSString *string1 = textField1.text;
    if ([string isEqualToString:[defaults objectForKey:@"password"]]) {
        if ([string1 isEqualToString:@"000000"]) {
            [_middleImage setImage:[UIImage imageNamed:@"image_unlock1"]];
            [self cancleView];
            [defaults setBool:YES forKey:@"jiesuo"];
            [defaults synchronize];
            [self performSelector:@selector(offButton) withObject:nil afterDelay:20.0f];
        }else{
            [UIView addMJNotifierWithText:@"设备密码错误,请重新输入" dismissAutomatically:NO];
        }
    }else{
        [UIView addMJNotifierWithText:@"操作员密码错误,请重新输入" dismissAutomatically:NO];
    }
}

- (void)loadAlertView:(NSString *)title contentStr:(NSString *)content btnNum:(NSInteger)num btnStrArr:(NSArray *)array type:(NSInteger)typeStr
{
    alertView = [[TWLAlertView alloc]initWithFrame:CGRectMake(0, 0, SCREEN_W, SCREEN_H)];
    [alertView initWithTitle:title contentStr:content type:typeStr btnNum:num btntitleArr:array];
    alertView.delegate = self;
    UIView *keywindow = [[UIApplication sharedApplication] keyWindow];
    [keywindow addSubview:alertView];
}

-(void)didClickButtonAtIndex:(NSUInteger)index password:(NSString *)password{
    switch (index) {
        case 101:
            [self cancleView];
            break;
        case 100:
            //判断管理员密码是否正确
            [self judgePassWord];
            break;
        default:
            break;
    }
}

#pragma mark - **************** 终端送电
- (IBAction)onPowerClick1:(id)sender {
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"jiesuo"] == YES) {
        if ([self judgeMpBlank] == YES) {
            if ([self judgeMpCorrect] == YES) {
                //组帧
                [self initSocket];
                [self writeDataToHost:1];
            }else{
                [UIView addMJNotifierWithText:@"请选择正确表" dismissAutomatically:NO];
            }
        }else{
            [UIView addMJNotifierWithText:@"请选择一块表" dismissAutomatically:YES];
        }
        
    }else{
        [UIView addMJNotifierWithText:@"请先解锁" dismissAutomatically:NO];
    }
}

- (void)socketDidDisconnect:(GCDAsyncSocket *)sock withError:(NSError *)error
{
    
    DLog(@"66%ld--%@",error.code,error.userInfo);
//    if ([_tag isEqualToString:@"7"] || ((error.code == 0)&&(error.userInfo != nil))) {// ------上传订单信息出现问题
//        if (upLoadCount<=3) {
//            [self reUploadOrder];
//            upLoadCount++;
//        }else{
//            [UIView addMJNotifierWithText:@"连接失败" dismissAutomatically:YES];
//            upLoadCount = 0;
//        }
//        
//    }
    if (error.code == 3) {
        [SVProgressHUD dismissInNow];
        [UIView addMJNotifierWithText:@"连接服务器超时" dismissAutomatically:YES];
        
    }else if(error.code == 51){
        [SVProgressHUD dismissInNow];
        [UIView addMJNotifierWithText:@"网络无连接" dismissAutomatically:YES];
    }else if(error.code == 0){
        if (error.userInfo) {
            [SVProgressHUD dismissInNow];
            [UIView addMJNotifierWithText:@"网络无连接" dismissAutomatically:YES];
        }
    }else if(error.code == 4){
        [SVProgressHUD dismissInNow];
        DLog(@"Socket 断开链接%d",[_sendSocket isConnected]);
    }else if(error.code == 61){
        [SVProgressHUD dismissInNow];
        [UIView addMJNotifierWithText:@"无法连接到服务器" dismissAutomatically:YES];
    }if(error.code == 2){
        [SVProgressHUD dismissInNow];
        [UIView addMJNotifierWithText:@"连接失败" dismissAutomatically:YES];
    }else{
        [SVProgressHUD dismissInNow];
        //        [UIView addMJNotifierWithText:@"获取数据失败" dismissAutomatically:YES];
    }
    
    
}

//关闭按钮
- (void)offButton
{
    [[NSUserDefaults standardUserDefaults] setBool:NO forKey:@"jiesuo"];
    [_middleImage setImage:[UIImage imageNamed:@"image_lock1"]];
}

- (void)cancleView
{
    [UIView animateWithDuration:0.3 animations:^{
        alertView.alpha = 0.0;
    } completion:^(BOOL finished) {
        [alertView removeFromSuperview];
        alertView = nil;
    }];
}

- (void)dealloc
{
    [[NSNotificationCenter defaultCenter] removeObserver:self];
}

- (void)leftButtonClick
{
    [self.mm_drawerController toggleDrawerSide:MMDrawerSideLeft animated:YES completion:nil];
}

// ------点击开始选择操作的设备
- (void)RightButtonClick
{
    // ------弹出选择树
    [self addSelectedView];
    [self.rdv_tabBarController setTabBarHidden:YES animated:YES];
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}


@end
